
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "moddatetime" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."itinerary" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" DEFAULT '''New itinerary''::text'::"text" NOT NULL,
    "destination" "text" DEFAULT '''Somewhere''::text'::"text" NOT NULL,
    "from_date" "date" DEFAULT "now"() NOT NULL,
    "to_date" "date" DEFAULT "now"() NOT NULL,
    "share_code" "text" DEFAULT "gen_random_uuid"(),
    "owner" "uuid",
    "is_public" boolean DEFAULT false NOT NULL,
    "thumbnail" "text"
);

ALTER TABLE "public"."itinerary" OWNER TO "postgres";

COMMENT ON TABLE "public"."itinerary" IS 'Main itinerary storage';

CREATE OR REPLACE FUNCTION "public"."get_itinerary_details"("id_num" integer) RETURNS "public"."itinerary"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    itinerary_details itinerary;
BEGIN
    SELECT * INTO itinerary_details FROM itinerary WHERE id = id_num;
    RETURN itinerary_details;
END;
$$;

ALTER FUNCTION "public"."get_itinerary_details"("id_num" integer) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."get_places_from_itinerary"("itinerary_id" integer) RETURNS TABLE("placeid" "text", "name" "text", "notes" "text")
    LANGUAGE "plpgsql"
    AS $$
        BEGIN
            RETURN QUERY
            SELECT place.google_maps_place_id, place.name, activity.notes
            FROM place
            JOIN activity ON place.id = activity.place_id
            JOIN itinerary ON activity.itinerary_id = itinerary.id
            WHERE itinerary.id = get_places_from_itinerary.itinerary_id
            ORDER BY activity.from_time;
        END;
        $$;

ALTER FUNCTION "public"."get_places_from_itinerary"("itinerary_id" integer) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."increment_rnk_in_activity"("itin_id" integer, "input_rnk" bigint) RETURNS "void"
    LANGUAGE "plpgsql"
    AS $$
        BEGIN
            UPDATE activity
            SET rnk = rnk + 1
            WHERE itinerary_id = increment_rnk_in_activity.itin_id
            AND rnk > increment_rnk_in_activity.input_rnk;
        END;
        $$;

ALTER FUNCTION "public"."increment_rnk_in_activity"("itin_id" integer, "input_rnk" bigint) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."update_itinerary_updated_at"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    UPDATE itinerary
    SET updated_at = now()
    WHERE id = NEW.itinerary_id;
    RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."update_itinerary_updated_at"() OWNER TO "postgres";

ALTER TABLE "public"."itinerary" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Itinerary_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."accommodation" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "itinerary_id" bigint NOT NULL,
    "from_date" "date" NOT NULL,
    "to_date" "date" NOT NULL,
    "place_id" bigint NOT NULL,
    "notes" "text",
    "check_in" time without time zone NOT NULL,
    "check_out" time without time zone NOT NULL
);

ALTER TABLE "public"."accommodation" OWNER TO "postgres";

COMMENT ON TABLE "public"."accommodation" IS 'Accommodation information for an Itinerary';

ALTER TABLE "public"."accommodation" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."accommodation_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."activity" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "itinerary_id" bigint,
    "from_time" timestamp without time zone,
    "place_id" bigint,
    "notes" "text" DEFAULT ''::"text" NOT NULL,
    "to_time" timestamp without time zone
);

ALTER TABLE "public"."activity" OWNER TO "postgres";

COMMENT ON TABLE "public"."activity" IS 'Things to do in an itinerary';

ALTER TABLE "public"."activity" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."activity_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."itinerary_editors" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "itinerary_id" bigint,
    "user_id" "uuid"
);

ALTER TABLE "public"."itinerary_editors" OWNER TO "postgres";

COMMENT ON TABLE "public"."itinerary_editors" IS 'Relationship of itineraries and their editors';

ALTER TABLE "public"."itinerary_editors" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."itinerary_editors_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."place" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "lat" double precision,
    "lng" double precision,
    "google_maps_place_id" "text"
);

ALTER TABLE "public"."place" OWNER TO "postgres";

COMMENT ON TABLE "public"."place" IS 'Represents a place on Earth';

ALTER TABLE "public"."place" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."place_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "first_name" "text",
    "last_name" "text",
    "travel_pace" "text",
    "languages_spoken" "text",
    "countries_to_visit" "text",
    "travel_budget" "text"
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."transportation" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "from_activity_id" bigint,
    "time" timestamp without time zone,
    "booking_reference" "text",
    "number" "text",
    "type" "text" DEFAULT ''::"text" NOT NULL,
    "notes" "text",
    "to_activity_id" bigint,
    "itinerary_id" bigint,
    "duration" "text",
    "distance" "text"
);

ALTER TABLE "public"."transportation" OWNER TO "postgres";

COMMENT ON TABLE "public"."transportation" IS 'Transportation options for an itinerary';

ALTER TABLE "public"."transportation" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."transportation_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."itinerary"
    ADD CONSTRAINT "Itinerary_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."itinerary"
    ADD CONSTRAINT "Itinerary_share_code_key" UNIQUE ("share_code");

ALTER TABLE ONLY "public"."accommodation"
    ADD CONSTRAINT "accommodation_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."activity"
    ADD CONSTRAINT "activity_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."itinerary_editors"
    ADD CONSTRAINT "itinerary_editors_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."place"
    ADD CONSTRAINT "place_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."transportation"
    ADD CONSTRAINT "transportation_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."activity"
    ADD CONSTRAINT "activity_itinerary_id_fkey" FOREIGN KEY ("itinerary_id") REFERENCES "public"."itinerary"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."activity"
    ADD CONSTRAINT "activity_place_id_fkey" FOREIGN KEY ("place_id") REFERENCES "public"."place"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."itinerary_editors"
    ADD CONSTRAINT "itinerary_editors_itinerary_id_fkey" FOREIGN KEY ("itinerary_id") REFERENCES "public"."itinerary"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."itinerary_editors"
    ADD CONSTRAINT "itinerary_editors_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."itinerary"
    ADD CONSTRAINT "itinerary_owner_fkey" FOREIGN KEY ("owner") REFERENCES "auth"."users"("id") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."accommodation"
    ADD CONSTRAINT "public_accommodation_itinerary_id_fkey" FOREIGN KEY ("itinerary_id") REFERENCES "public"."itinerary"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."accommodation"
    ADD CONSTRAINT "public_accommodation_place_id_fkey" FOREIGN KEY ("place_id") REFERENCES "public"."place"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."transportation"
    ADD CONSTRAINT "public_transportation_from_activity_id_fkey" FOREIGN KEY ("from_activity_id") REFERENCES "public"."activity"("id");

ALTER TABLE ONLY "public"."transportation"
    ADD CONSTRAINT "public_transportation_itinerary_id_fkey" FOREIGN KEY ("itinerary_id") REFERENCES "public"."itinerary"("id");

ALTER TABLE ONLY "public"."transportation"
    ADD CONSTRAINT "public_transportation_to_activity_id_fkey" FOREIGN KEY ("to_activity_id") REFERENCES "public"."activity"("id");

CREATE POLICY "Enable delete for users based on owner" ON "public"."itinerary" FOR DELETE USING (("auth"."uid"() = "owner"));

CREATE POLICY "Enable insert for users based on owner" ON "public"."itinerary" FOR INSERT WITH CHECK (("auth"."uid"() = "owner"));

CREATE POLICY "Enable select for users based on owner" ON "public"."itinerary" FOR SELECT USING (("auth"."uid"() = "owner"));

ALTER TABLE "public"."itinerary" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."itinerary" TO "anon";
GRANT ALL ON TABLE "public"."itinerary" TO "authenticated";
GRANT ALL ON TABLE "public"."itinerary" TO "service_role";

GRANT ALL ON FUNCTION "public"."get_itinerary_details"("id_num" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."get_itinerary_details"("id_num" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_itinerary_details"("id_num" integer) TO "service_role";

GRANT ALL ON FUNCTION "public"."get_places_from_itinerary"("itinerary_id" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."get_places_from_itinerary"("itinerary_id" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_places_from_itinerary"("itinerary_id" integer) TO "service_role";

GRANT ALL ON FUNCTION "public"."increment_rnk_in_activity"("itin_id" integer, "input_rnk" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."increment_rnk_in_activity"("itin_id" integer, "input_rnk" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."increment_rnk_in_activity"("itin_id" integer, "input_rnk" bigint) TO "service_role";

GRANT ALL ON FUNCTION "public"."update_itinerary_updated_at"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_itinerary_updated_at"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_itinerary_updated_at"() TO "service_role";

GRANT ALL ON SEQUENCE "public"."Itinerary_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Itinerary_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Itinerary_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."accommodation" TO "anon";
GRANT ALL ON TABLE "public"."accommodation" TO "authenticated";
GRANT ALL ON TABLE "public"."accommodation" TO "service_role";

GRANT ALL ON SEQUENCE "public"."accommodation_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."accommodation_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."accommodation_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."activity" TO "anon";
GRANT ALL ON TABLE "public"."activity" TO "authenticated";
GRANT ALL ON TABLE "public"."activity" TO "service_role";

GRANT ALL ON SEQUENCE "public"."activity_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."activity_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."activity_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."itinerary_editors" TO "anon";
GRANT ALL ON TABLE "public"."itinerary_editors" TO "authenticated";
GRANT ALL ON TABLE "public"."itinerary_editors" TO "service_role";

GRANT ALL ON SEQUENCE "public"."itinerary_editors_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."itinerary_editors_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."itinerary_editors_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."place" TO "anon";
GRANT ALL ON TABLE "public"."place" TO "authenticated";
GRANT ALL ON TABLE "public"."place" TO "service_role";

GRANT ALL ON SEQUENCE "public"."place_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."place_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."place_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."transportation" TO "anon";
GRANT ALL ON TABLE "public"."transportation" TO "authenticated";
GRANT ALL ON TABLE "public"."transportation" TO "service_role";

GRANT ALL ON SEQUENCE "public"."transportation_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."transportation_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."transportation_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
